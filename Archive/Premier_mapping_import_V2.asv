base_file_directory = "C:\Users\hanna\OneDrive - Nexus365\Year 4\Term 1\HC_nanoindenation_premier\Premier_Nanoindentation\Example_Mapping_Data\";
noofsegments=3;

indent_file_locations = strcat(base_file_directory,"Indent_Data"); % Gets the full folder path for the indentation data
folder_info = dir(fullfile(indent_file_locations, '/*.txt')); % Gets a list of file properties within the folder
initial_number_of_data = size(folder_info,1); % Counts number of files in the folder


progress_bar = waitbar(0,"Importing Indentation Data - seperate"); % Creates a progress bar
original_load_displacement = struct("Indent_Index",cell(initial_number_of_data,1),"Displacement_Load_Data",cell(initial_number_of_data,1),"X_Coordinate",cell(initial_number_of_data,1),"Y_Coordinate",cell(initial_number_of_data,1)); % Creates an empty struct with 4 fields for each indent 



for file_loop = 1:initial_number_of_data % For count through number of indents in folder
    completion_fraction = file_loop/initial_number_of_data; % Calculates fraction for progress bar
    waitbar(completion_fraction); % Updates progress bar
    file_name = folder_info(file_loop).name; % Extract file name of indent
    full_file_name = fullfile(indent_file_locations, file_name); % Extract file name (including path) for each indent
    full_input = importdata(full_file_name); % Extracts contents of file as struct depending on data structure
    data_input = full_input.data; % Selects only the numerical data
    raw_input = []; % Resets table for below
    raw_input(:,1) = data_input(:,1); % Loads uncorrected depth values into table
    raw_input(:,2) = data_input(:,2); % Loads uncorrected load values into table
    original_load_displacement(file_loop).Indent_Index = file_loop-1; % Writes indent number to struct (starting indexing at zero as per files)
    original_load_displacement(file_loop).Displacement_Load_Data = raw_input; % Writes displacement and load data array to struct

%for segment_of_load=1:noofsegments
    


end

close(progress_bar) % Closes progress bar


load_function_path= strcat(base_file_directory,"Load_Function");
folder_info = dir(fullfile(load_function_path, '/*.txt'));
file_name = folder_info.name; 
full_file_name = fullfile(load_function_path, file_name); 
load_function=readlines(full_file_name);%takes each line of the text file and turns it into an array
Indexnoofseqpoints = find(contains(load_function,'NumofSeqPoints'));


for segmentno=1:1:noofsegments
   Indexforsegment=Indexnoofseqpoints(1+segmentno);
   noofseqpointsforsegmentstring=load_function(Indexforsegment);
   noofseqpointsforsegment = sscanf(noofseqpointsforsegmentstring, '%d_â†’:NumofSeqPoints');
   for file_loop = 1:initial_number_of_data
   extractingPandH=original_load_displacement(file_loop).Displacement_Load_Data;
   Pandhforsegment=extractingPandH(1:noofseqpointsforsegment,1:2);
   end
   
end

















% for file_loop = 1:continuous_number_of_data % For count through continuous data files (should be one for each bundle)
%     completion_fraction = file_loop/continuous_number_of_data; % Calculates fraction for progress bar
%     waitbar(completion_fraction); % Updates wait bar
%     file_name = continuous_folder_info(file_loop).name; % Extract file name of indent
%     full_file_name = fullfile(continuous_indent_file_locations, file_name); % Extract file name (including path) for each indent
%     full_input = importdata(full_file_name); % Extracts contents of file as struct depending on data structure
%     data_input = full_input.data; % Selects only the numerical data
%     for continuous_data_input_loop = 1:length(data_input(:,2)) % For each continuous data value
%         continuous_data_displacement(end+1) = data_input(continuous_data_input_loop,2); % Adds bundle continuous displacement data stream to existing continuous data stream of previous bundles
%         continuous_data_load(end+1) = data_input(continuous_data_input_loop,3); % Does the same as above but for load
%         continuous_data_voltage(end+1) = data_input(continuous_data_input_loop,6);
%         continuous_data_time(end+1) =  data_input(continuous_data_input_loop,3);
%     end
% end
% 
% plot(continuous_data_voltage);
% 
% close(progress_bar) % Closes progress bar